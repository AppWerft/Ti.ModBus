/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.modbus;

import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.UnknownHostException;

import net.wimpi.modbus.ModbusException;
import net.wimpi.modbus.io.ModbusTCPTransaction;
import net.wimpi.modbus.msg.ReadInputDiscretesResponse;
import net.wimpi.modbus.net.TCPMasterConnection;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiC;

@Kroll.proxy(creatableInModule = ModbusModule.class)
public class MasterConnectionProxy extends KrollProxy {
	// Standard Debugging variables
	private static final String LCAT = "Modbus";
	private int ref = 0;
	private int count = 0;
	private int repeat = 1;
	private ModbusTCPTransaction trans;

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict options) {
		super.handleCreationDict(options);
		if (options.containsKeyAndNotNull("ref"))
			ref = options.getInt("ref");
		if (options.containsKeyAndNotNull("count"))
			ref = options.getInt("count");
		if (options.containsKeyAndNotNull("repeat"))
			ref = options.getInt("repeat");
		URL url = null;
		if (options.containsKeyAndNotNull(TiC.PROPERTY_URL)) {
			try {
				url = new URL(options.getString(TiC.PROPERTY_URL));
			} catch (MalformedURLException e) {
				e.printStackTrace();
			}
		}
		if (url != null)
			try {
				TCPMasterConnection con = new TCPMasterConnection(
						InetAddress.getByName(url.getHost()));
				trans = new ModbusTCPTransaction(con);
				int k = 0;
				do {
					try {
						trans.execute();
					} catch (ModbusException e) {
						e.printStackTrace();
					}
					ReadInputDiscretesResponse res = (ReadInputDiscretesResponse) trans
							.getResponse();
					Log.d(LCAT, "Digital Inputs Status="
							+ res.getDiscretes().toString());
					k++;
				} while (k < repeat);
			} catch (UnknownHostException e) {
				e.printStackTrace();
			}
	}

}