/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.modbus;

import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;

import net.wimpi.modbus.Modbus;
import net.wimpi.modbus.ModbusException;
import net.wimpi.modbus.io.ModbusTCPTransaction;
import net.wimpi.modbus.msg.IllegalFunctionRequest;
import net.wimpi.modbus.msg.ModbusRequest;
import net.wimpi.modbus.msg.ReadCoilsRequest;
import net.wimpi.modbus.msg.ReadInputDiscretesRequest;
import net.wimpi.modbus.msg.ReadInputDiscretesResponse;
import net.wimpi.modbus.msg.ReadInputRegistersRequest;
import net.wimpi.modbus.msg.ReadMultipleRegistersRequest;
import net.wimpi.modbus.msg.WriteCoilRequest;
import net.wimpi.modbus.msg.WriteMultipleCoilsRequest;
import net.wimpi.modbus.msg.WriteMultipleRegistersRequest;
import net.wimpi.modbus.msg.WriteSingleRegisterRequest;
import net.wimpi.modbus.net.TCPMasterConnection;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollObject;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiC;

import de.appwerft.modbus.Requests.ReadCoils;
import de.appwerft.modbus.Requests.ReadInputDiscretes;
import de.appwerft.modbus.Requests.ReadInputRegisters;
import android.os.AsyncTask;

// This proxy can be created by calling Modbus.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule = ModbusModule.class)
public class RequestProxy extends KrollProxy {
	// Standard Debugging variables
	private static final String LCAT = "Modbus";
	private TCPMasterConnection conn;
	static int DEFAULTPORT = 502;
	private int ref = 0;
	private int count = 0;
	private int repeat = 1;
	public KrollObject krollObject = getKrollObject();
	public KrollFunction onLoad;
	public KrollFunction onError;

	public TCPMasterConnection getConnection() {
		return conn;
	}

	public int getCount() {
		return count;
	}

	public int getRepeat() {
		return repeat;
	}

	public int getRef() {
		return ref;
	}

	@Override
	public void handleCreationDict(KrollDict opts) {
		super.handleCreationDict(opts);
		if (opts.containsKeyAndNotNull(TiC.PROPERTY_ONLOAD)) {
			Object o = opts.get(TiC.PROPERTY_ONLOAD);
			if (o instanceof KrollFunction) {
				onLoad = (KrollFunction) o;
			}
		}
		if (opts.containsKeyAndNotNull(TiC.PROPERTY_ONERROR)) {
			Object o = opts.get(TiC.PROPERTY_ONERROR);
			if (o instanceof KrollFunction) {
				onError = (KrollFunction) o;
			}
		}
		if (opts.containsKeyAndNotNull("functionCode")) {
			int functionCode = opts.getInt("functionCode");
			ModbusRequest request = null;
			switch (functionCode) {
			case Modbus.READ_COILS:
				new ReadCoils(this);
				break;
			case Modbus.READ_INPUT_DISCRETES:
				new ReadInputDiscretes(this);
				break;
			case Modbus.READ_INPUT_REGISTERS:
				new ReadInputRegisters(this);
				break;
			case Modbus.READ_MULTIPLE_REGISTERS:
				new ReadMultipleRegisters(this);
				break;
			case Modbus.WRITE_MULTIPLE_REGISTERS:
				new WriteMultipleRegisters(this);
				break;
			case Modbus.WRITE_SINGLE_REGISTER:
				new WriteSingleRegister(this);
				break;
			case Modbus.WRITE_COIL:
				new WriteCoil(this);
				break;
			case Modbus.WRITE_MULTIPLE_COILS:
				new WriteMultipleCoils(this);
				break;
			default:
				request = new IllegalFunctionRequest(functionCode);
				break;

			}
		}

	}

	@Kroll.method
	public void request(@Kroll.argument(optional = true) int functionId,
			@Kroll.argument(optional = true) Object cb1, Object cb2) {

	}
}